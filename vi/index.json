[{"categories":["Front-end"],"content":" Bài viết được mình dịch lại của tác giả Simon Holdorf. Link bài viết gốc tại đây https://dev.to/simonholdorf/9-projects-you-can-do-to-become-a-frontend-master-in-2020-n2h ","date":"2020-09-07","objectID":"/vi/07_09/:0:0","tags":["front-end"],"title":"9 dự án bạn có thể làm để trở thành một chuyên gia Front-end trong năm 2020","uri":"/vi/07_09/"},{"categories":["Front-end"],"content":"Giới thiệu Cho dù bạn là người mới tập tễnh hay là người đã có kinh nghiệm về lập trình, thì trong ngành này, học những khái niệm và ngôn ngữ/ frameworks mới là bắt buộc để bắt kịp với những thay đổi chóng mặt. Lấy ví dụ về React - mã nguồn mở được phát triển từ Facebook chỉ mới ra mắt cách đây 4 năm, nhưng nó đã dần trở thành một trong những lựa chọn cho các nhà phát triển Javascript trên toàn cầu. Nhưng tất nhiên Vue và Angular cũng có một lượng lớn người theo dõi. Theo sau đó là Svelte và những framework khác như Next.js, Nuxt.js, Gatsby, Gridsome và Quasar và …Nếu bạn muốn được tỏa sáng như một chuyên gia về Javascript, bạn nên có kinh nghiệm ít nhất với một vài frameworks và thư viện - bên cạnh việc làm bài tập về JS thuần. Để giúp bạn trở thành chuyên gia Front-end trong năm 2020, tôi đã thu thập được 9 dự án khác nhau, với mỗi một chủ đề riêng biệt và sử dụng framework hoặc thư viện của Javascript khác nhau, sẽ giúp bạn thêm vào portfolio của mình. Nên nhớ rằng, không có gì có thể giúp bạn nhiều hơn việc bạn tự xây dựng nó. ","date":"2020-09-07","objectID":"/vi/07_09/:1:0","tags":["front-end"],"title":"9 dự án bạn có thể làm để trở thành một chuyên gia Front-end trong năm 2020","uri":"/vi/07_09/"},{"categories":["Front-end"],"content":"1. Xây dựng ứng dụng tìm kiếm phim sử dụng React (với Hooks) Điều đầu tiên là bạn có thể bắt đầu xây dựng một ứng dụng tìm kiếm phim bằng React. Giao diện của ứng dụng sẽ trông như thế này. ","date":"2020-09-07","objectID":"/vi/07_09/:2:0","tags":["front-end"],"title":"9 dự án bạn có thể làm để trở thành một chuyên gia Front-end trong năm 2020","uri":"/vi/07_09/"},{"categories":["Front-end"],"content":"Bạn học gì trong đó? Xây dựng ứng dụng này sẽ giúp bạn cải thiện kỹ năng về React của mình thông qua cách sử dụng Hooks API. Dự án sử dụng các component React, hooks, API từ bên ngoài và tất nhiên là một số style CSS. ","date":"2020-09-07","objectID":"/vi/07_09/:2:1","tags":["front-end"],"title":"9 dự án bạn có thể làm để trở thành một chuyên gia Front-end trong năm 2020","uri":"/vi/07_09/"},{"categories":["Front-end"],"content":"Công nghệ và tính năng React với Hooks create-react-app JSX CSS Không sử dụng React class mà thay vào đó sẽ sử dụng React functional trong dự án này, và chắc chắn nó sẽ giúp bạn rất nhiều trong năm 2020. Dự án mẫu ở đây. https://www.freecodecamp.org/news/how-to-build-a-movie-search-app-using-react-hooks-24eb72ddfaf7/ Làm theo hướng dẫn hoặc tạo ra một hương vị của riêng bạn :D ","date":"2020-09-07","objectID":"/vi/07_09/:2:2","tags":["front-end"],"title":"9 dự án bạn có thể làm để trở thành một chuyên gia Front-end trong năm 2020","uri":"/vi/07_09/"},{"categories":["Front-end"],"content":"2. Xây dựng một ứng dụng chat với Vue Một dự án tuyệt vời khác dành cho bạn đó là xây dựng một ứng dụng chat sử dụng Vue. Ứng dụng sẽ trông như thế này: ","date":"2020-09-07","objectID":"/vi/07_09/:3:0","tags":["front-end"],"title":"9 dự án bạn có thể làm để trở thành một chuyên gia Front-end trong năm 2020","uri":"/vi/07_09/"},{"categories":["Front-end"],"content":"Bạn học gì trong đó? Làm theo hướng dẫn, bạn sẽ học cách để thiết lập một ứng dụng Vue từ đầu, tạo components, xử lý state, tạo route, kết nối tới dịch vụ bên thứ ba và xử lý authentication ","date":"2020-09-07","objectID":"/vi/07_09/:3:1","tags":["front-end"],"title":"9 dự án bạn có thể làm để trở thành một chuyên gia Front-end trong năm 2020","uri":"/vi/07_09/"},{"categories":["Front-end"],"content":"Công nghệ và tính năng Vue Vuex Vue Router Vue CLI Pusher CSS Đây là một dự án tuyệt vời để bắt đầu với Vue hoặc cải thiện các kỹ năng hiện có của bạn để phát triển trong năm 2020. Link dự án mẫu: https://www.sitepoint.com/pusher-vue-real-time-chat-app/ ","date":"2020-09-07","objectID":"/vi/07_09/:3:2","tags":["front-end"],"title":"9 dự án bạn có thể làm để trở thành một chuyên gia Front-end trong năm 2020","uri":"/vi/07_09/"},{"categories":["Front-end"],"content":"3. Xây dựng một ứng dụng thời tiết với Angular 8 Dự án này sẽ giúp bạn xây dựng một ứng dụng thời tiết sử dụng Google’s Angular 8. ","date":"2020-09-07","objectID":"/vi/07_09/:4:0","tags":["front-end"],"title":"9 dự án bạn có thể làm để trở thành một chuyên gia Front-end trong năm 2020","uri":"/vi/07_09/"},{"categories":["Front-end"],"content":"Bạn học gì trong đó? Dự án này sẽ dạy cho bạn những kỹ năng quý giá như từ cách tạo ứng dụng từ đầu, bắt đầu với từ việc thiết kế cho đến phát triển rồi đến việc triển khai ứng dụng thành một sản phẩm hoàn thiện ","date":"2020-09-07","objectID":"/vi/07_09/:4:1","tags":["front-end"],"title":"9 dự án bạn có thể làm để trở thành một chuyên gia Front-end trong năm 2020","uri":"/vi/07_09/"},{"categories":["Front-end"],"content":"Công nghệ và tính năng Angular 8 Firebase Server-Side Rendering CSS with Grid Layout and Flexbox Mobile friendly \u0026 responsive Dark Mode Beautiful UI Điều tôi thực sự thích về dự án hoàn thiện này đó là bạn không học mọi thứ một cách riêng lẻ mà bạn sẽ học nó từ việc thiết kế cho đến phần triển khai cuối cùng. Bạn thực sự nên làm điều này! https://medium.com/@hamedbaatour/build-a-real-world-beautiful-web-app-with-angular-6-a-to-z-ultimate-guide-2018-part-i-e121dd1d55e ","date":"2020-09-07","objectID":"/vi/07_09/:4:2","tags":["front-end"],"title":"9 dự án bạn có thể làm để trở thành một chuyên gia Front-end trong năm 2020","uri":"/vi/07_09/"},{"categories":["Front-end"],"content":"4. Xây dựng một ứng dụng To-do-list với Svelte Svelte kinda là một khái niệm mới để có thể so sánh được với React, Vue và Angular nhưng nó vẫn là một trong những xu hướng trong năm 2020. Okay, ứng dụng To-do không phải là ứng dụng hot nữa nhưng điều này thực sự giúp bạn rèn luyện các kỹ năng về Svelte và trông nó sẽ như thế này: ","date":"2020-09-07","objectID":"/vi/07_09/:5:0","tags":["front-end"],"title":"9 dự án bạn có thể làm để trở thành một chuyên gia Front-end trong năm 2020","uri":"/vi/07_09/"},{"categories":["Front-end"],"content":"Bạn học gì trong đó? Ví dụ này sẽ giúp bạn học cách tạo ra một ứng dụng sử dụng Svelte 3 từ A tới Z. Từ việc tạo components, styling đến xử lý sự kiện. ","date":"2020-09-07","objectID":"/vi/07_09/:5:1","tags":["front-end"],"title":"9 dự án bạn có thể làm để trở thành một chuyên gia Front-end trong năm 2020","uri":"/vi/07_09/"},{"categories":["Front-end"],"content":"Công nghệ và tính năng Svelte 3 Components Styling via CSS ES 6 syntax Đây là dự án mà tôi thấy khá tốt để bắt đầu với Svelte. Và biết đâu bạn sẽ tạo ra nhiều cái thú vị và toàn diện hơn về Svelte sau hướng dẫn này :v https://medium.com/codingthesmartway-com-blog/building-a-svelte-3-todo-app-from-start-to-deployment-1737f72c23a6 ","date":"2020-09-07","objectID":"/vi/07_09/:5:2","tags":["front-end"],"title":"9 dự án bạn có thể làm để trở thành một chuyên gia Front-end trong năm 2020","uri":"/vi/07_09/"},{"categories":["Front-end"],"content":"5. Xây dựng một giỏ hàng cho trang thương mại điện tử với Next.js Next.js là framework phổ biến nhất để tạo ra ứng dụng React hỗ trợ serve-side rendering. Dự án này sẽ giúp bạn cách để xây dựng một giỏ hàng cho trang thương mại điện tử và nó sẽ như thế này: ","date":"2020-09-07","objectID":"/vi/07_09/:6:0","tags":["front-end"],"title":"9 dự án bạn có thể làm để trở thành một chuyên gia Front-end trong năm 2020","uri":"/vi/07_09/"},{"categories":["Front-end"],"content":"Bạn học gì trong đó? Trong dự án này, bạn sẽ học cách để thiết lập môi trường phát triển Next.js, tạo ra pages và components, lấy dữ liệu, style và triển khai ứng dụng. ","date":"2020-09-07","objectID":"/vi/07_09/:6:1","tags":["front-end"],"title":"9 dự án bạn có thể làm để trở thành một chuyên gia Front-end trong năm 2020","uri":"/vi/07_09/"},{"categories":["Front-end"],"content":"Công nghệ và tính năng Next.js Components and Pages Data Fetching Styling Deployment SSR and SPA Luôn là một điều tuyệt vời khi có một ví dụ trong thế giới thực giống như là một trang giỏ hàng để học những cái mới. Bạn có thể xem hướng dẫn đó ở đây: https://snipcart.com/blog/next-js-ecommerce-tutorial ","date":"2020-09-07","objectID":"/vi/07_09/:6:2","tags":["front-end"],"title":"9 dự án bạn có thể làm để trở thành một chuyên gia Front-end trong năm 2020","uri":"/vi/07_09/"},{"categories":["Front-end"],"content":"6. Xây dựng một trang blog đa ngôn ngữ với Nuxt.js Next.js là framework của React thì Nuxt.js là framework của Vue. Đây là một framework tuyệt vời kết hợp sức mạnh của server-side rendering và single-palge-applications. Giao diện cuối cùng của dự án sẽ trông như thế này: ","date":"2020-09-07","objectID":"/vi/07_09/:7:0","tags":["front-end"],"title":"9 dự án bạn có thể làm để trở thành một chuyên gia Front-end trong năm 2020","uri":"/vi/07_09/"},{"categories":["Front-end"],"content":"Bạn học gì trong đó? Dự án này sẽ dạy bạn cách để xây dựng một trang web đầy đủ sử dụng Nuxt.js từ thiết lập ban đầu cho đến việc triển khai cuối cùng. Nó sử dụng nhiều tính năng thú vị mà Nuxt cung cấp như pages, components cũng như styling với SCSS ","date":"2020-09-07","objectID":"/vi/07_09/:7:1","tags":["front-end"],"title":"9 dự án bạn có thể làm để trở thành một chuyên gia Front-end trong năm 2020","uri":"/vi/07_09/"},{"categories":["Front-end"],"content":"Công nghệ và tính năng Nuxt.js Components and Pages Storyblok module Mixins Vuex for state management SCSS for styling Nuxt middlewares Đây là một dự án thú vị dành cho bạn và bao gồm nhiều tính năng tuyệt vời của Nuxt.js. Tôi thích làm việc với Nuxt và tôi khuyên bạn nên thử cái này, nó cũng sẽ giúp bạn lập trình Vue tốt hơn. https://www.storyblok.com/tp/nuxt-js-multilanguage-website-tutorial ","date":"2020-09-07","objectID":"/vi/07_09/:7:2","tags":["front-end"],"title":"9 dự án bạn có thể làm để trở thành một chuyên gia Front-end trong năm 2020","uri":"/vi/07_09/"},{"categories":["Front-end"],"content":" Như tiêu đề mình đã đề cập, chủ đề này mình sẽ chia sẻ về CSS cơ bản và nâng cao theo những gì mình đã học và đang học một cách tối giản nhất, có thể có nhiều thiếu sót, để tìm hiểu sâu hơn mọi người có thể tìm kiếm theo từ khóa ở các mục lớn trong bài. Cảm ơn mọi người đã theo dõi CSS là gì? Theo trang W3Schools, CSS viết tắt của Cascading Style Sheets. CSS mô tả cách các phần tử HTML được hiển thị trên màn hình hoặc các phương tiện khác. CSS giúp bạn kiểm soát bố cục của nhiều trang web cùng một lúc. Do đó nó tiết kiệm được rất nhiều thời gian cho bạn trong công việc. ","date":"2020-09-03","objectID":"/vi/03_09/:0:0","tags":["css"],"title":"CSS Cơ bản và Nâng cao - Tối giản (P1)","uri":"/vi/03_09/"},{"categories":["Front-end"],"content":"1. Cú pháp cơ bản Selector {property: value;} Selector: đối tượng sẽ được áp dụng: VD: body, h1, h2, img, .username, #title… Ngoài viết tên selector theo class, id, tag. Chúng ta có thể viết tên selector theo phân cấp để chỉ các ảnh trong #entry. VD: #entry img. VD 1 đoạn mã về input \u003cinput name = \"Search\" type = \"text\" value = \"Key Word\"\u003e Để áp dụng CSS cho riêng thuộc tính tìm kiếm này, ta dùng input[name= “Search”] Dùng selector ảnh hưởng đến toàn trang web * {color: red} Property: các thuộc tính quy định cách trình bày: VD: background-color, font-family, color, padding,.. Value: giá trị của thuộc tính: VD: #FFF định màu trắng cho nền trang. ","date":"2020-09-03","objectID":"/vi/03_09/:1:0","tags":["css"],"title":"CSS Cơ bản và Nâng cao - Tối giản (P1)","uri":"/vi/03_09/"},{"categories":["Front-end"],"content":"2. Chú thích trong CSS Chú thích (comment) sẽ được trình duyệt bỏ qua và không hiển thị trên trang web. Sử dụng cấu trúc /*.........*/ ở trên 1 dòng hoặc nhiều dòng để chú thích. VD: /* Style for image */ Ngoài ra để viết chú thích nhanh hơn, bạn hãy gõ đoạn text bạn cần chú thích, sau đó bôi đen và sử dụng cú pháp Ctrl + / để tạo chú thích. ","date":"2020-09-03","objectID":"/vi/03_09/:2:0","tags":["css"],"title":"CSS Cơ bản và Nâng cao - Tối giản (P1)","uri":"/vi/03_09/"},{"categories":["Front-end"],"content":"3. Nhúng CSS vào HTML Có 3 cách để thêm CSS vào file HTML External CSS: viết CSS ở một file riêng, đặt tên là \u003cname\u003e.css, sau đó sử dụng thẻ link để nhúng file này vào trong phần \u003chead\u003e của file html. VD: file myStyle.css: h1 { color: white; background–color: purple; } .content { color: red; background–color: white; text-align: center; } file html \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003clink rel=\"stylesheet\" href=\"myStyle.css\"\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eH1 works!\u003c/h1\u003e \u003cp class=\"content\"\u003ep work!.\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e Internal CSS: đặt trong mục head của file html, được cấu trúc bằng cặp thẻ \u003cstyle\u003e\u003c/style\u003e VD: file html \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003cstyle\u003e h1 { color: white; background–color: purple; } .content { color: red; background–color: white; text-align: center; } \u003c/style\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eH1 works!\u003c/h1\u003e \u003cp class=\"content\"\u003ep work!.\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e Inline CSS: áp dụng trực tiếp vào phần tử. CSS bằng cách này không được khuyến khích, việc quản lý file sẽ rất khó nếu chỉ sử dụng Inline CSS, vì nó chỉ áp dụng cho một element duy nhất. VD: file html \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003cbody\u003e \u003ch1 style=\"color:white; background–color: purple;\"\u003eH1 work!\u003c/h1\u003e \u003cp style=\"color:red; background–color: white; text-align: center;\"\u003ep works!\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-09-03","objectID":"/vi/03_09/:3:0","tags":["css"],"title":"CSS Cơ bản và Nâng cao - Tối giản (P1)","uri":"/vi/03_09/"},{"categories":["Front-end"],"content":"4. Đơn vị CSS: Đơn vị chiều dài %: phần trăm, là đơn vị tham chiếu tỉ lệ so với một phần tử mẹ dựa vào kích thước. in: inch (1 inch = 2,54 cm) em: 1em tương đương với kích thước font chữ hiện hành, nếu font hiện hành có kích thước 14px thì 1em = 14px ex: 1ex bằng chiều cao của chữ x hiện hành pt: Point (1pt = 1/72 inch) pc: Pica (1pc = 12pt) px: Pixel (điểm ảnh trên màn hình máy tính) cm: định nghĩa đơn vị đo bằng cm mm: định nghĩa đơn vị đo bằng mm vh: 1% chiều cao của khung nhìn vw: 1% chiều rộng của khung nhìn ","date":"2020-09-03","objectID":"/vi/03_09/:4:0","tags":["css"],"title":"CSS Cơ bản và Nâng cao - Tối giản (P1)","uri":"/vi/03_09/"},{"categories":["Front-end"],"content":"5. Sự ưu tiên về vị trí đặt CSS CSS Nội tuyến \u003e CSS bên trong \u003e CSS bên ngoài \u003e CSS mặc định của trình duyệt Thay đổi độ ưu tiên cho thuộc tính CSS: selector {property: value !important} Nếu cùng một thuộc tính cho một selector, nếu cả 2 đều có !important thì cái sau được lấy. ","date":"2020-09-03","objectID":"/vi/03_09/:5:0","tags":["css"],"title":"CSS Cơ bản và Nâng cao - Tối giản (P1)","uri":"/vi/03_09/"},{"categories":["Front-end"],"content":"6. Background 6.1. Màu nền:: (background-color) background-color: red; 6.2 Ảnh nền: (background-image) background-image: url(avatar.png) 6.3 Lặp lại ảnh nền: (background-repeat) background-repeat: no-repeat + repeat-x: /* Lặp lại theo phương ngang */ + repeat-y: /* Lặp lại theo phương dọc */ + repeat: /* Lặp lại theo 2 phương (Đây là giá trị mặc định) */ + no-repeat: /* Không lặp lại ảnh */ 6.4.Khóa ảnh nền: (background-attachment) background-attachment: fixed + scroll: /* Ảnh nền cuộn xuống cùng nội dung trang web (Giá trị mặc định) */ + fixed: /* Ảnh nền cố định khi cuộn nội dung trang web. */ 6.5. Định vị ảnh nền: (background-position) background-position: 5cm 2cm /* Ảnh được định vị 5cm từ trái qua, 2cm từ phải qua */ Chúng ta có thể nhóm thuộc tính CSS: background-color: transparent; background-image: url(avatar.png) background-repeat: no-repeat background-attachment: fixed background-position: right bottom thành một dòng ngắn background: transparent url(avatar.png) no-repeat fixed right bottom; ","date":"2020-09-03","objectID":"/vi/03_09/:6:0","tags":["css"],"title":"CSS Cơ bản và Nâng cao - Tối giản (P1)","uri":"/vi/03_09/"},{"categories":["Front-end"],"content":"7. Font chữ 7.1. Font-family Định nghĩa danh sách ưu tiên các font sẽ được dùng để hiện thị lên trang web. Có hai loại font được chỉ định: family-names và generic families + family-names: Tên cụ thể của font: Roboto, Arial, Time New Roman… + generic families: Tên của một họ gồm nhiều font: sans-serif, serif,… body { font-family: “Roboto”, sans-serif; } 7.2. Font-style Định nghĩa việc áp dụng các kiểu in thường, in nghiêng, hay in xiên cho chữ. h1 {font-style: italic;} /* (normal, oblique) */ 7.3. Font-variant Được dùng để chọn chế độ bình thường và chế small-caps (chữ in hoa có kích cỡ nhỏ hơn chữ in hoa bình thường) của một font chữ. h1 {font-variant: small-caps;} 7.4. Font-weight Được dùng để chọn chế độ bình thường hay in đậm h1 {font-weight: bold;} 7.5. Font-size Được dùng để chỉnh kích thước font chữ h1 {font-size: 14px;} 7.6. Rút gọn font: Từ việc bạn viết h1 { font-style: italic; font-variant: small-caps; font-weight: bold; font-size: 14px; font-family: “Roboto”, sans-serif; } thì có thể rút ngắn lại thành h1 {font: italic small-caps bold 14px “Roboto”, sans-serif} ","date":"2020-09-03","objectID":"/vi/03_09/:7:0","tags":["css"],"title":"CSS Cơ bản và Nâng cao - Tối giản (P1)","uri":"/vi/03_09/"},{"categories":["Front-end"],"content":"8. Text 8.1. Màu chữ (color) Để định màu chữ cho một thành phần nào đó trên trang web body {color: #FFF} 8.2. Text-indent Tạo khoảng thụt đầu dòng cho dòng đầu tiên của văn bản p {text-indent: 30px} 8.3. Text-align Canh chỉnh văn bản cho các thành phần trong trang web. Có 4 giá trị: left (canh trái), right (canh phải), center (canh giữa), justify (canh đều). p {text-align: justify} 8.4. Letter-spacing Dùng để chỉnh khoảng cách giữa các ký tự trong một văn bản. h1 {letter-spacing: 5px} 8.5. Text-decoration Thêm các hiệu ứng: underline (gạch chân), line-through (gạch xiên), overline (gạch đầu), blink (hiệu ứng nhấp nháy). h1 {text-decoration: overline} 8.6. Text-transform Quy định chế độ in hoa hay in thường của văn bản mà không phụ thuộc vào văn bản gốc trên HTML. Có 4 giá trị: uppercase (in hoa), lowercase (in thường), capitalize (in hoa ký tự đầu tiên trong mỗi từ) và none (không áp dụng hiệu ứng). h1 {text-transform: uppercase} Tạm thời kết thúc phần 1 ở đây nhé. Cảm ơn mọi người đã xem bài. ","date":"2020-09-03","objectID":"/vi/03_09/:8:0","tags":["css"],"title":"CSS Cơ bản và Nâng cao - Tối giản (P1)","uri":"/vi/03_09/"},{"categories":["React"],"content":" Thời gian gần đây mình có đang tìm hiểu về React/Redux và cũng có tìm hiểu một số bài viết trên web. Vừa để cải thiện tiếng anh, vừa để nâng cao thêm kiến thức, mình có dịch một bài về “Lấy dữ liệu từ một API sử dụng React/Redux”. Hi vọng một phần nào đó sẽ giúp ích cho những ai đã và đang tìm hiểu về React/Redux. Bài dịch có thể có nhiều thiếu sót, mong mọi người góp ý để mình hoàn thiện hơn. ","date":"2020-08-26","objectID":"/vi/26_08/:0:0","tags":["react","redux","fetch api"],"title":"Lấy dữ liệu từ một API sử dụng React/Redux","uri":"/vi/26_08/"},{"categories":["React"],"content":"Nguồn bài viết: Fetching data from an api using React/Redux ","date":"2020-08-26","objectID":"/vi/26_08/:0:1","tags":["react","redux","fetch api"],"title":"Lấy dữ liệu từ một API sử dụng React/Redux","uri":"/vi/26_08/"},{"categories":["React"],"content":"Bắt đầu Tôi quyết định chia sẻ một số kiến thức mà tôi đã thu được thông qua việc mắc sai lầm mà bạn cũng có thể mắc phải. Mọi thứ tôi viết ở đây tôi đều học được bằng cách đọc những bài viết trên blog, cố gắng hiểu những gì đã làm được và “trial and error” (đây là cách hoàn thành công việc bằng việc dùng phép thử thông qua những phương pháp khác nhau cho đến khi tìm được phương pháp đúng). Bây giờ, những điều đầu tiên là bạn cần làm là cài đặt React và Redux. Tôi giả sử là bạn đã biết cách cài đặt chúng. Sau đó, bạn sẽ thiết lập ứng dụng React của bạn, bạn cần cài đặt một công cụ được gọi là redux-thunk bằng cách sử dụng lệnh “npm install redux-thunk”. Với tất cả những gì đã được cài đặt, giờ đây chúng ta có thể xem xét những Component mà chúng ta sẽ cần để biến những điều kì diệu thành hiện thực! ","date":"2020-08-26","objectID":"/vi/26_08/:1:0","tags":["react","redux","fetch api"],"title":"Lấy dữ liệu từ một API sử dụng React/Redux","uri":"/vi/26_08/"},{"categories":["React"],"content":"Thunk là cái gì vậy? Về cơ bản, thunk là một function được gọi bởi một function khác. Chờ đã… Cái gì? Vâng, đó là cách mà tôi đã phản ứng khi lần đầu tiên tôi nghe tới điều này. Hãy để tôi cho bạn xem một ví dụ: function some_function() { // do something return function thunk() { // do something thunky later } } Như vậy, some_function được gọi, nó làm một vài việc và sau đó trả về một hàm mới với các câu lệnh và có thể là các dữ liệu dùng cho sau này. ","date":"2020-08-26","objectID":"/vi/26_08/:2:0","tags":["react","redux","fetch api"],"title":"Lấy dữ liệu từ một API sử dụng React/Redux","uri":"/vi/26_08/"},{"categories":["React"],"content":"Vậy còn Redux thì sao? Tôi không muốn đào sâu về Redux (chính xác hơn là tôi không thể). Vì vậy, lời giải thích ngắn gọn chỉ là: Nó là nơi chứa đựng các state trong ứng dụng javascript. Nó giữ tất cả những dữ liệu bạn cần trong ứng dụng của bạn ở một nơi. Mọi component trong ứng dụng của bạn đều có không gian ở trong vùng chứa state nơi mà bạn tìm kiếm dữ liệu. Khi dữ liệu được thay đổi thì component cũng sẽ thay đổi theo. ","date":"2020-08-26","objectID":"/vi/26_08/:3:0","tags":["react","redux","fetch api"],"title":"Lấy dữ liệu từ một API sử dụng React/Redux","uri":"/vi/26_08/"},{"categories":["React"],"content":"Actions Ý tưởng là bạn gửi các action lên redux và dựa trên những action đó, state được thay đổi. Điều buồn cười là: Một action không được làm bất cứ thứ gì, nghe thì có vẻ như có những thứ đang diễn ra, nhưng thực ra là không có. Một action chỉ đơn giản là một đối tượng với một type key. Như thế này: // this is an action { type: \"SOME_ACTION\", payload: {} } Hầu hết thời gian bạn không muốn viết đi viết lại cùng một đối tượng, vì thế có một khái niệm được gọi là Action Creators. ","date":"2020-08-26","objectID":"/vi/26_08/:4:0","tags":["react","redux","fetch api"],"title":"Lấy dữ liệu từ một API sử dụng React/Redux","uri":"/vi/26_08/"},{"categories":["React"],"content":"Action Creators. Action Creators thực hiện chính xác những gì mà chúng nghe, chúng tạo ra những đối tượng action cho bạn. const SOME_ACTION = \"SOME_ACTION\"; function create_action(data) { return { type: SOME_ACTION, payload: data } } Vì vậy với những action creators đó, bạn có thể dễ dàng sử dụng SOME_ACTION ngay bây giờ bằng cách gọi create_action(data). Những action creators đó có thể được gửi lên redux bằng cách sử dụng dispatch(create_action(data)). ","date":"2020-08-26","objectID":"/vi/26_08/:5:0","tags":["react","redux","fetch api"],"title":"Lấy dữ liệu từ một API sử dụng React/Redux","uri":"/vi/26_08/"},{"categories":["React"],"content":"Reducers Sau khi một action được gửi lên, nó sẽ được truyền vào một cái gọi là Reducer. Một reducer là một hàm chức năng được đưa ra một state và một action. Tùy vào action mà nó sẽ biến đổi state và sau đó sẽ trả về một state mới. function someReducer(state, action) { switch(action.type) { case SOME_ACTION: return { ...state, data: action.payload } break; default: // the dispatched action is not in this reducer, return the state unchanged return state; } } Những ứng dụng phức tạp hơn rất có thể có 2 reducer, mỗi một reducer sẽ chịu trách nhiệm cho một phần của state. Vì vậy, điều quan trọng là không bao giờ được phép quên trường hợp mặc định (là trường hợp mà reducer trả về state chưa được thay đổi). Điều quan trọng cần lưu ý rằng các reducer là các hàm thuần khiết. Chúng không bao giờ gọi một cái gì đó giống như API hoặc gửi một action khác tới redux. ","date":"2020-08-26","objectID":"/vi/26_08/:6:0","tags":["react","redux","fetch api"],"title":"Lấy dữ liệu từ một API sử dụng React/Redux","uri":"/vi/26_08/"},{"categories":["React"],"content":"Bạn đã nói về thunks chưa? Bạn đã nhớ điều đó. Okay, nói về thunks một lần nữa. Tôi chỉ đề cập đến reducers là thuần khiết. Nhưng thường thì chúng ta muốn có một loại lệnh gọi API hoặc gửi một cái gì đó tùy thuộc vào dữ liệu hoặc bất cứ cái gì… Nhưng chúng ta không thể… reducers là thuần khiết… Redux-Thunk sẽ làm điều đó. Redux-Thunk khá dễ hiểu. Nó được coi như là một đoạn mã trung gian cho redux store. Nó xem xét mọi action đơn lẻ được gửi đi và nếu nó là một hàm, nó sẽ gọi cái hàm đó. Nhưng điều này mở ra một thế giới hoàn toàn mới của những “action” lạ mắt được gửi đến redux. Bạn có thắc mắc, làm thế nào tôi nhận được điều kì diệu nhỏ này vào store của tôi? ","date":"2020-08-26","objectID":"/vi/26_08/:7:0","tags":["react","redux","fetch api"],"title":"Lấy dữ liệu từ một API sử dụng React/Redux","uri":"/vi/26_08/"},{"categories":["React"],"content":"Hãy lấy một số products Chúng ta muốn nạp một số product từ API của chúng ta. Để làm điều này, đầu tiên chúng ta thiết lập component trong một số loại state đang chờ xử lý, chúng ta hiển thị một cái gọi là loading spinner hay một cái gì đó tương tự. Sau đó, chúng ta tải dữ liệu và quyết định xem chúng ta có thể hiển thị danh sách product được hay không hoặc hiển thị một số loại thông báo lỗi. Chúng ta bắt đầu thiết lập action creators. // action.js export const FETCH_PRODUCTS_PENDING = 'FETCH_PRODUCTS_PENDING'; export const FETCH_PRODUCTS_SUCCESS = 'FETCH_PRODUCTS_SUCCESS'; export const FETCH_PRODUCTS_ERROR = 'FETCH_PRODUCTS_ERROR'; function fetchProductsPending() { return { type: FETCH_PRODUCTS_PENDING } } function fetchProductsSuccess(products) { return { type: FETCH_PRODUCTS_SUCCESS products: products } } function fetchProductsError(error) { return { type: FETCH_PRODUCTS_ERROR error: error } } Bây giờ chúng ta đã có action creators, hãy thiết lập reducer cho toàn bộ. // reducer.js import {FETCH_PRODUCTS_PENDING, FETCH_PRODUCTS_SUCCESS, FETCH_PRODUCTS_ERROR} from './actions'; const initialState = { pending: false, products: [], error: null } export function productsReducer(state = initialState, action) { switch(action.type) { case FETCH_PRODUCTS_PENDING: return { ...state, pending: true } case FETCH_PRODUCTS_SUCCESS: return { ...state, pending: false, products: action.payload } case FETCH_PRODUCTS_ERROR: return { ...state, pending: false, error: action.error } default: return state; } } export const getProducts = state =\u003e state.products; export const getProductsPending = state =\u003e state.pending; export const getProductsError = state =\u003e state.error; Okay, bây giờ chúng ta có một phần lớn công việc được thực hiện. Những điều cần lưu ý trong đoạn code trên là ba hàm ở cuối reducer. Chúng được gọi là các selector. Các Selector được sử dụng để lấy các phần được định nghĩa của state. Trong những ứng dụng nhỏ, chúng thực sự cần thiết. Nhưng nếu bạn mở rộng quy mô ứng dụng của mình và nó càng ngày càng phức tạp hơn, nó sẽ thực sự lộn xộn nếu bạn thay đổi một cái gì đó trong state của bạn. Tôi chắc chắn sẽ làm một bài blog về các selector, bởi vì tôi nghĩ rằng chúng thực sự quan trọng để thiết lập một ứng dụng react/redux có thể mở rộng. Chúng ta đang ở đâu… À vâng, một phần lớn công việc đã hoàn thành. Điều duy nhất còn lại cho chúng ta để làm về phía redux là viết một trong những action mới. // fetchProducts.js import {fetchProductsPending, fetchProductsSuccess, fetchProductsError} from 'actions'; function fetchProducts() { return dispatch =\u003e { dispatch(fetchProductsPending()); fetch('https://exampleapi.com/products') .then(res =\u003e res.json()) .then(res =\u003e { if(res.error) { throw(res.error); } dispatch(fetchProductsSuccess(res.products); return res.products; }) .catch(error =\u003e { dispatch(fetchProductsError(error)); }) } } export default fetchProducts; Action trên khá là đơn giản. Đầu tiên chúng ta gửi pending action. Sau đó lấy dữ liệu từ API của chúng ta. Tiếp đo giải mã json và truyền vào một object. Cuối cùng kiểm tra lỗi. Nếu có lỗi xảy ra, chúng ta sẽ throw nó và gọi hàm error. Nếu mọi thứ hoạt động bình thường, chúng ta gọi success action (fetchProductsSuccess). Reducer sẽ xử lý phần còn lại. Đây là tất cả về lấy dữ liệu từ server… Không, đùa thôi, không phải vậy đâu. Nhưng đây là cách kết thúc về việc lấy dữ liệu từ api mà hầu hết các bài viết đã làm, đúng không. Nhưng… ","date":"2020-08-26","objectID":"/vi/26_08/:8:0","tags":["react","redux","fetch api"],"title":"Lấy dữ liệu từ một API sử dụng React/Redux","uri":"/vi/26_08/"},{"categories":["React"],"content":"Những gì về ứng dụng của chúng ta? Oh, bạn muốn các sản phẩm từ store của bạn thực sự hiển thị trong ứng dụng react của bạn? Okay, hãy làm điều đó. Tôi giả dụ như bạn biết cách để kết nối ứng dụng react của bạn tới redux store bằng provider. Có rất nhiều bài viết về chủ đề này ở ngoài kia. Sau khi bạn làm điều đó, bạn sẽ cần một vài component. Cho tôi mọi thứ bắt đầu về một view. Đối với tôi, một view là một component bao bọc mọi thứ mà một user nhận được trong một component cha. Component cha này hầu hết đều có kết nối tới redux store và chia sẻ dữ liệu với component mà nó gói gọn. import React, { Component } from 'react'; import PropTypes from 'prop-types'; import { connect } from 'react-redux'; import { bindActionCreators } from 'redux'; import fetchProductsAction from 'fetchProducts'; import {getProductsError, getProducts, getProductsPending} from 'reducer'; import LoadingSpinner from './SomeLoadingSpinner'; import ProductList from './ProductList'; class ProductView extends Component { constructor(props) { super(props); this.shouldComponentRender = this.shouldComponentRender.bind(this); } componentWillMount() { const {fetchProducts} = this.props; fetchProducts(); } shouldComponentRender() { const {pending} = this.props; if(this.pending === false) return false; // more tests return true; } render() { const {products, error, pending} = this.props; if(!this.shouldComponentRender()) return \u003cLoadingSpinner /\u003e return ( \u003cdiv className='product-list-wrapper'\u003e {error \u0026\u0026 \u003cspan className='product-list-error'\u003e{error}\u003c/span\u003e} \u003cProductList products={products} /\u003e \u003c/div\u003e ) } } const mapStateToProps = state =\u003e ({ error: getProductsError(state), products: getProducts(state), pending: getProductsPending(state) }) const mapDispatchToProps = dispatch =\u003e bindActionCreators({ fetchProducts: fetchProductsAction }, dispatch) export default connect( mapStateToProps, mapDispatchToProps )(ProductView ); Vì vậy, rất nhiều thứ đang diễn ra ở đây. Chúng ta viết một component React tiêu chuẩn. Sau đó, chúng ta sử dụng connect để kết nối nó tới redux store. Connect có hai tham số: Một hàm mapStateToProps để ánh xạ các phần của state vào props của bạn và một hàm mapDispatchToProps để ánh xạ các hàm vào props của bạn, khi được gọi sẽ được gửi tới redux. Cuối cùng, chúng ta đặt những thứ đó lại với nhau và nhìn xem, chúng ta có một kết nối tới store. Ở trong hàm mapStateToProps, chúng ta sử dụng các selector mà chúng ta đã viết trước đó. Tôi muốn thêm chức năng gọi là shouldComponentRender vào component view và hầu hết các component. Tôi đặt tên như vậy bởi vì nó gần giống với tên của phương thức lifecycle (shouldComponentUpdate) của React. Nó kiểm tra xem component có nên render hay không. Nếu không, nó sẽ render ra LoadingSpinner component. Tôi thấy nó rất có lợi khi làm việc như thế này, bởi vì các component luôn luôn được khởi tạo lại và tất cả các component con được gắn lại sau khi pending flag, nó điều khiển hàm render trong trường hợp này. Do đó, bạn có thể thêm redux state vào state của component trong hàm khởi tạo (constructor). (Tôi không muốn nói về những gì truyền vào redux và những gì truyền vào component state, đây là chủ đề cho một bài viết khác). Trong hầu hết các dự án của tôi, tôi thấy đây là một trong những vấn đề khó chịu nhất. Hãy nghĩ về một component mà render ra một sản phẩm. Nó được khởi tạo bởi dữ liệu và sau đó một số thành phần con như price calculator, có component state, được khởi tạo trong constructor của nó. Khi dữ liệu mới xuất hiện, bạn cần kiểm tra xem calculator có cần phải xác định lại hay không. Với hàm ShouldComponentRender, thật dễ dàng để làm điều đó. Mỗi khi pending flag được bật (có thể do một sản phẩm mới được chọn), mọi thứ sẽ được khởi động lại và rất tốt để sử dụng. Tất nhiên có một vài lý do tại sao bạn lại có các component trong phần view của bạn mà không được render lại. Nếu có trường hợp như vậy, hãy loại bỏ hàm shouldComponentRender từ phần view và làm việc với nó trong các component con. Bạn có thể sử dụng","date":"2020-08-26","objectID":"/vi/26_08/:9:0","tags":["react","redux","fetch api"],"title":"Lấy dữ liệu từ một API sử dụng React/Redux","uri":"/vi/26_08/"},{"categories":["Blog"],"content":" Một ngày đẹp trời, mình bắt đầu nổi hứng muốn tạo một trang blog cho riêng mình để lưu lại những cái mình đã trải nghiệm và đang tìm hiểu. Tập trung chính vào công nghệ và tiếng anh. Mình lượn lờ trên mạng và xem cách tạo trang web cá nhân cũng như dùng cái gì để giải quyết vấn đề đó, nào là Wordpress, Hexo, Jekyll, Hugo,… Và sau một vài chục phút tìm hiểu thì mình quyết định chọn Hugo để đồng hành cùng mình. Tại sao chỉ từ A đến X, vì mình muốn để Z cho bạn tự trải nghiệm ","date":"2020-08-24","objectID":"/vi/24_08/:0:0","tags":["hugo","blog"],"title":"Tạo blog cá nhân năm 2020 bằng Hugo từ A đến X. Tại sao không?","uri":"/vi/24_08/"},{"categories":["Blog"],"content":"Tại sao chọn Hugo? Hugo là một nền tảng giúp bạn xây dựng một trang web tĩnh tích hợp sẵn với github được viết bằng ngôn ngữ Golang (con ruột của Google) và sử dụng markdown (file .md) để viết bài. Link dành cho bạn nào chưa biết về markdown tại đây. Vậy tại sao mình lại sử dụng Hugo để tạo blog?  Ưu điểm: Tốc độ build trang web nhanh Không có cơ sở dữ liệu, plugin không yêu cầu bất cứ quyền nào, không lo ngại về bảo mật. Không có quá nhiều thứ phải tìm hiểu để bắt đầu.  Nhược điểm: Chắc là bạn phải biết chút ít về lập trình thì sẽ dễ dàng hơn. Nào, bây giờ vào vấn đề chính, cùng tạo ra một trang web cho chính mình để khoe với bạn bè nào. ","date":"2020-08-24","objectID":"/vi/24_08/:1:0","tags":["hugo","blog"],"title":"Tạo blog cá nhân năm 2020 bằng Hugo từ A đến X. Tại sao không?","uri":"/vi/24_08/"},{"categories":["Blog"],"content":"1. Cài đặt Hugo trên Window Vì mình đang dùng Window nên mình sẽ hướng dẫn cài đặt ở trên Window thôi nhé. Link tải: Hugo -\u003e chọn phiên bản Windows-64bit Tải về -\u003e giải nén vào thư mục bất kỳ. Vào Control Panel -\u003e System and Security -\u003e System -\u003e Advanced system settings -\u003e Tab “Advanced” và cài đặt như hình. Mở cmd và gõ lệnh hugo version. Nếu hiển thị dòng “Hugo Static Site Generator…” thì có nghĩa là bạn đã cài Hugo thành công. Okeee, vậy là đã xong bước đầu tiên trong hành trình tạo blog cá nhân, tiếp theo chúng ta sẽ ….. ","date":"2020-08-24","objectID":"/vi/24_08/:2:0","tags":["hugo","blog"],"title":"Tạo blog cá nhân năm 2020 bằng Hugo từ A đến X. Tại sao không?","uri":"/vi/24_08/"},{"categories":["Blog"],"content":"2. Tạo thư mục mà bạn lưu source code dưới local. Chọn một thư mục bất kì và gọi cmd. Ở đây mình sẽ tạo thư mục QuanBlog ở ổ đĩa F bằng cách vào ổ F, gọi cmd và sử dụng lệnh hugo new site QuanBlog. Tận hưởng thành quả…tadaaa. ","date":"2020-08-24","objectID":"/vi/24_08/:3:0","tags":["hugo","blog"],"title":"Tạo blog cá nhân năm 2020 bằng Hugo từ A đến X. Tại sao không?","uri":"/vi/24_08/"},{"categories":["Blog"],"content":"3. Chọn theme cho blog của bạn. Hugo cung cấp một kho theme cho bạn tha hồ lựa chọn ở https://themes.gohugo.io/. Ở bài viết này, mình sẽ sử dụng theme Hello Friend NG để làm theme chính cho blog. Yia, tải về và cấu hình thoai. Chọn theme và clone về thư mục blog hoặc tải file zip về sau đó giải nén và copy vào thư mục themes của bạn. Mở cmd và clone: git clone https://github.com/rhazdon/hugo-theme-hello-friend-ng.git themes/hello-friend-ng Sau đó bạn vào thư mục exampleSite của theme mà bạn vừa tải về, copy và ghì đè toàn bộ những gì có trong đó ra ngoài thư mục chính của bạn (Bao gồm thư mục content, resources và file config.toml). Mở cmd lên và gõ lệnh hugo server, vào trình duyệt và gõ localhost:1313. Tadaaa…Các bạn sẽ được kết quả như này. ","date":"2020-08-24","objectID":"/vi/24_08/:4:0","tags":["hugo","blog"],"title":"Tạo blog cá nhân năm 2020 bằng Hugo từ A đến X. Tại sao không?","uri":"/vi/24_08/"},{"categories":["Blog"],"content":"4. Thử viết một bài chào sân chơi mới nào. Vào editor yêu thích của bạn để gõ vài dòng code nhé. Mình thì mình sử dụng Visual Studio Code để thực hiện nhiệm vụ này :D Các bạn sẽ thấy trong thư mục content có mục posts và các file như thế này. Xóa những bài viết mặc định của theme này và sẽ tạo bài viết mới nhé. Bật terminal, gõ hugo new posts/hello.md. Trong đó posts là thư mục posts, hello.md là file để viết bài. Các bạn cấu hình lại như sau. Quay lại trình duyệt và check thử xem như nào… Ok rồi nè, tiếp theo…. ","date":"2020-08-24","objectID":"/vi/24_08/:5:0","tags":["hugo","blog"],"title":"Tạo blog cá nhân năm 2020 bằng Hugo từ A đến X. Tại sao không?","uri":"/vi/24_08/"},{"categories":["Blog"],"content":"5. Deploy lên gihub để gửi link sang khoe với bạn bè hay bạn bồ nào. Trước tiên vào github tạo một cái repository để chứa source code và đặt tên theo cấu trúc như này để làm tên miền cho trang blog của mình luôn. \u003cusername\u003e.github.io Còn nếu đặt một tên khác, ví dụ như đặt repository là Myblog thì sau này muốn vào trang Blog của bạn, bạn phải gõ \u003cusername\u003e.github.io/Myblog. Chọn Public để được được kích hoạt Github Pages nhé. Tích vào ô Initialize this repository… Sau đó Create repository thôi. Ok, bước tiếp theo mình sẽ kết nối giữa repository trên git và repository dưới local của mình (là thư mục QuanBlog), mục đích là để nó nhận ra là cùng chung một nhà với nhau, để lát push được source code dưới local lên. Mình sẽ chỉ đẩy code ở thư mục public lên (thư mục này generate source code của mình ra html để hiển thị lên web). Nếu các bạn không thấy thư mục này thì vào thư mục chính gọi cmd và nhập lệnh hugo nhé. Sau đó vào thư mục public và remote repo trên git về. git init git remote add origin https://github.com/hongquanhak/hongquanhak.github.io.git Commit và push code lên github thôi nào. git add . git commit -m “first commit” git push -u origin master (git push -f orgin master) Vào kiểm tra trong repository thấy như này là bạn đã push code thành công rồi đấy. Tiếp theo vào Settings, ở trong mục Options, kéo xuống phía dưới mục GitHub Pages và bạn sẽ thấy như ảnh dưới đây, nghĩa là bạn đã có thể sử dụng trang web rồi. Tèn tén, háo hức quá, vào kiểm tra trang web của mình nào. Nhưng mà, ối, tại sao nó lại ra như thế này, huhu. Đừng quá lo lắng, chúng ta sẽ giải quyết nhanh thôi mà. Hãy quay lại source code của bạn, vào file config.toml (ở folder chính chứ không phải trong folder theme nhé). Sửa dòng baseURL = “https://hongquanhak.github.io/”. Nghĩa là trỏ tới trang web của bạn. Sau đó bật terminal lên nhập lệnh hugo để nó generate sang thư mục public. Cuối cùng vào thư mục public và git add . -\u003e git commit -m “gì gì đó” -\u003e git push origin master Đợi tầm 10s để github cập nhật lại trạng thái và cuối cùng, chần chừ gì nữa mà không bật trang web của mình và tận hưởng thành quả… Okey, vậy là xong rồi đó, muốn chỉnh sửa thêm thì các bạn vào file config.toml để sửa theo ý muốn của mình và có thể tìm hiểu thêm về golang để vọc vạch nhiều trò hơn trên trang blog nhé. Chúc các bạn có một trang blog thật hịn \u003c3 P/s: À mà nữa, nên tạo thêm một cái repository trên github và để ở chế độ Private xong rồi push toàn bộ source code của mình lên đấy để lỡ sau này có mất file thì còn clone trên git về và tái sử dụng được nhé. ","date":"2020-08-24","objectID":"/vi/24_08/:6:0","tags":["hugo","blog"],"title":"Tạo blog cá nhân năm 2020 bằng Hugo từ A đến X. Tại sao không?","uri":"/vi/24_08/"},{"categories":null,"content":" I’m Quan. I’m 22 years old. I’m currently a senior student at Danang University of Science and Technology. My major is information of Technology. I’m consider myselft as an open-minded person and have a great passion for sports, especially soccer, badminton and table tennis. ","date":"2014-04-09","objectID":"/vi/about/:0:0","tags":null,"title":"About","uri":"/vi/about/"}]